-- Drop the database if it exists
IF EXISTS (SELECT name FROM sys.databases WHERE name = 'RestaurantDB')
    DROP DATABASE RestaurantDB;
GO
CREATE DATABASE RestaurantDB;
GO
USE RestaurantDB;
GO

-- Drop tables if they exist (in correct order to avoid FK issues)
IF OBJECT_ID('dbo.CARD_PAYMENT', 'U') IS NOT NULL DROP TABLE dbo.CARD_PAYMENT;
IF OBJECT_ID('dbo.PAYMENT', 'U') IS NOT NULL DROP TABLE dbo.PAYMENT;
IF OBJECT_ID('dbo.FEEDBACK', 'U') IS NOT NULL DROP TABLE dbo.FEEDBACK;
IF OBJECT_ID('dbo.ORDER_DETAILS', 'U') IS NOT NULL DROP TABLE dbo.ORDER_DETAILS;
IF OBJECT_ID('dbo.ORDERS', 'U') IS NOT NULL DROP TABLE dbo.ORDERS;
IF OBJECT_ID('dbo.RESERVATION', 'U') IS NOT NULL DROP TABLE dbo.RESERVATION;
IF OBJECT_ID('dbo.SHIFTS', 'U') IS NOT NULL DROP TABLE dbo.SHIFTS;
IF OBJECT_ID('dbo.INVENTORY', 'U') IS NOT NULL DROP TABLE dbo.INVENTORY;
IF OBJECT_ID('dbo.DISH', 'U') IS NOT NULL DROP TABLE dbo.DISH;
IF OBJECT_ID('dbo.MENU', 'U') IS NOT NULL DROP TABLE dbo.MENU;
IF OBJECT_ID('dbo.SUPPLIER', 'U') IS NOT NULL DROP TABLE dbo.SUPPLIER;
IF OBJECT_ID('dbo.STAFF', 'U') IS NOT NULL DROP TABLE dbo.STAFF;
IF OBJECT_ID('dbo.RESTAURANT', 'U') IS NOT NULL DROP TABLE dbo.RESTAURANT;
IF OBJECT_ID('dbo.CUSTOMER', 'U') IS NOT NULL DROP TABLE dbo.CUSTOMER;
GO

-- First create tables without circular dependency
CREATE TABLE RESTAURANT (
    RestaurantID INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    Location NVARCHAR(255) NOT NULL,
    ContactNumber NVARCHAR(20) UNIQUE NOT NULL,
    ManagerID INT NULL, -- Changed to NULL to allow initial insert
    Capacity INT NOT NULL CHECK (Capacity > 0)
);

CREATE TABLE STAFF (
    StaffID INT IDENTITY(1,1) PRIMARY KEY,
    RestaurantID INT NOT NULL,
    FullName NVARCHAR(100) NOT NULL,
    ContactNumber NVARCHAR(20) UNIQUE NOT NULL,
    Role NVARCHAR(50) NOT NULL CHECK (Role IN ('Chef', 'Waiter', 'Manager', 'Bartender', 'Host', 'Cashier', 'Sous Chef')),
    FOREIGN KEY (RestaurantID) REFERENCES RESTAURANT(RestaurantID) ON DELETE CASCADE
);

-- Later we'll add the FK for ManagerID
ALTER TABLE RESTAURANT
ADD CONSTRAINT FK_Restaurant_Manager FOREIGN KEY (ManagerID) REFERENCES STAFF(StaffID);

-- MENU Table
CREATE TABLE MENU (
    MenuID INT IDENTITY(1,1) PRIMARY KEY,
    RestaurantID INT NOT NULL,
    Name NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    ActiveStatus BIT DEFAULT 1,
    FOREIGN KEY (RestaurantID) REFERENCES RESTAURANT(RestaurantID) ON DELETE CASCADE
);

-- DISH Table
CREATE TABLE DISH (
    DishID INT IDENTITY(1,1) PRIMARY KEY,
    MenuID INT NOT NULL,
    Name NVARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) NOT NULL CHECK (Price > 0),
    Ingredients NVARCHAR(MAX) NOT NULL,
    PreparationTime INT NOT NULL CHECK (PreparationTime > 0),
    IsVegetarian BIT DEFAULT 0,
    IsAvailable BIT DEFAULT 1,
    FOREIGN KEY (MenuID) REFERENCES MENU(MenuID) ON DELETE CASCADE
);

-- CUSTOMER Table
CREATE TABLE CUSTOMER (
    CustomerID INT IDENTITY(1,1) PRIMARY KEY,
    FullName NVARCHAR(100) NOT NULL,
    Email NVARCHAR(100) UNIQUE NOT NULL,
    Contact NVARCHAR(20) UNIQUE NOT NULL,
    Address NVARCHAR(MAX) NOT NULL
);

-- RESERVATION Table
CREATE TABLE RESERVATION (
    ReservationID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    ReservationDate DATE NOT NULL,
    TimeSlot TIME NOT NULL,
    PartySize INT NOT NULL CHECK (PartySize > 0),
    Status NVARCHAR(20) DEFAULT 'Pending' CHECK (Status IN ('Pending', 'Confirmed', 'Canceled')),
    FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID) ON DELETE CASCADE,
    FOREIGN KEY (RestaurantID) REFERENCES RESTAURANT(RestaurantID) ON DELETE CASCADE
);

-- ORDER Table
CREATE TABLE ORDERS (
    OrderID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    ReservationID INT NULL,
    OrderDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID) ON DELETE CASCADE,
    FOREIGN KEY (RestaurantID) REFERENCES RESTAURANT(RestaurantID) ON DELETE CASCADE,
    FOREIGN KEY (ReservationID) REFERENCES RESERVATION(ReservationID) ON DELETE NO ACTION
);

-- ORDER DETAILS Table
CREATE TABLE ORDER_DETAILS (
    OrderDetailID INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT NOT NULL,
    DishID INT NOT NULL,
    Quantity INT NOT NULL CHECK (Quantity > 0),
    Subtotal DECIMAL(10,2) NOT NULL CHECK (Subtotal >= 0),
    FOREIGN KEY (OrderID) REFERENCES ORDERS(OrderID) ON DELETE CASCADE,
    FOREIGN KEY (DishID) REFERENCES DISH(DishID) ON DELETE NO ACTION
);

-- PAYMENT Table
CREATE TABLE PAYMENT (
    PaymentID INT IDENTITY(1,1) PRIMARY KEY,
    OrderID INT NOT NULL,
    PaymentType NVARCHAR(20) NOT NULL CHECK (PaymentType IN ('Credit Card', 'Debit Card', 'Cash')),
    Amount DECIMAL(10,2) NOT NULL CHECK (Amount > 0),
    TransactionDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (OrderID) REFERENCES ORDERS(OrderID) ON DELETE CASCADE
);

-- CARD_PAYMENT Table
CREATE TABLE CARD_PAYMENT (
    PaymentID INT PRIMARY KEY,
    CardNumber NVARCHAR(16) NOT NULL,
    ExpirationDate DATE NOT NULL,
    CVV CHAR(4) NOT NULL CHECK (LEN(CVV) BETWEEN 3 AND 4),
    FOREIGN KEY (PaymentID) REFERENCES PAYMENT(PaymentID) ON DELETE CASCADE
);

-- FEEDBACK Table
CREATE TABLE FEEDBACK (
    FeedbackID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT NOT NULL,
    OrderID INT NOT NULL,
    FeedbackType NVARCHAR(20) NOT NULL CHECK (FeedbackType IN ('Positive', 'Negative', 'Neutral')),
    Rating INT NOT NULL CHECK (Rating BETWEEN 1 AND 5),
    Comments NVARCHAR(MAX),
    FeedbackDate DATE DEFAULT GETDATE(),
    FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID) ON DELETE CASCADE,
    FOREIGN KEY (OrderID) REFERENCES ORDERS(OrderID) ON DELETE NO ACTION
);

-- SUPPLIER Table
CREATE TABLE SUPPLIER (
    SupplierID INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    ContactPerson NVARCHAR(100),
    ContactNumber NVARCHAR(20) UNIQUE NOT NULL,
    SuppliesCategory NVARCHAR(100),
    Address NVARCHAR(MAX) NOT NULL
);

-- INVENTORY Table
CREATE TABLE INVENTORY (
    InventoryID INT IDENTITY(1,1) PRIMARY KEY,
    RestaurantID INT NOT NULL,
    SupplierID INT NOT NULL,
    IngredientName NVARCHAR(100) NOT NULL,
    StockLevel INT NOT NULL CHECK (StockLevel >= 0),
    LastRestockedDate DATE,
    ReorderThreshold INT NOT NULL CHECK (ReorderThreshold > 0),
    FOREIGN KEY (RestaurantID) REFERENCES RESTAURANT(RestaurantID) ON DELETE CASCADE,
    FOREIGN KEY (SupplierID) REFERENCES SUPPLIER(SupplierID) ON DELETE CASCADE
);

-- SHIFTS Table
CREATE TABLE SHIFTS (
    ShiftID INT IDENTITY(1,1) PRIMARY KEY,
    StaffID INT NOT NULL,
    ShiftDate DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    FOREIGN KEY (StaffID) REFERENCES STAFF(StaffID) ON DELETE CASCADE
);


GO